[{"title":"Sinopharm Starter  sinopharm-starter-mybaits-plus","path":"/2024/09/06/sinopharm/sinopharm-starter-mybaits-plus/","content":"数据访问模块：MyBatis-Plus简介sinopharm-starter-data-mybatis-plus 是 Sinopharm Starter 数据访问模块针对 MyBatis-Plus 框架的默认处理。 12345&lt;dependency&gt; &lt;groupId&gt;com.sinopharm&lt;/groupId&gt; &lt;artifactId&gt;sinopharm-starter-data-mybatis-plus&lt;/artifactId&gt; &lt;version&gt;$&#123;version&#125;&lt;/version&gt;&lt;/dependency&gt; 主要特性 版本锁定：涉及依赖已进行版本锁定，使用时无需配置版本 默认配置：已配置分页插件（启用溢出处理）、防全表更新与删除插件、乐观锁插件、MyBatis 默认配置（自动驼峰命名规则、日志配置）、SQL 打印及性能分析配置（p6spy） Mapper 扫描包配置：只需要在配置文件中指定 Mapper 接口扫描包配置 扩展 BaseMapper 配置示例配置详情请查看：com.sinopharm.starter.data.mybatis.plus.autoconfigure.MyBatisPlusExtensionProperties 123456789101112131415--- ### MyBatis Plus 配置mybatis-plus: ## 扩展配置 extension: enabled: true # Mapper 接口扫描包配置 mapper-package: $&#123;project.base-package&#125;.**.mapper # 分页插件配置 pagination: enabled: true db-type: MYSQL # 防全表更新与删除插件(默认开启) blockAttackPluginEnabled: false # 乐观锁插件(默认开启) optimisticLockerPluginEnabled: false 下方 MyBatis Plus 配置已经在本模块中进行了默认配置，使用者无需再进行配置，如需要更改，可进行覆盖配置。 1234567891011mybatis-plus: # 启动时是否检查 MyBatis XML 文件的存在（默认：false 不检查） check-config-location: true ## MyBatis 原生支持配置 configuration: # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名）到经典 Java 属性名 aColumn（驼峰命名）的类似映射 map-underscore-to-camel-case: true # MyBatis 自动映射时未知列或未知属性处理策略，通过该配置可指定 MyBatis 在自动映射过程中遇到未知列或者未知属性时如何处理 auto-mapping-unknown-column-behavior: NONE # 日志配置（关闭，单纯使用 p6spy 分析） log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl 核心依赖 依赖 描述 mybatis-plus-boot-starter MyBatis Plus（MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，简化开发、提高效率） dynamic-datasource-spring-boot-starter Dynamic Datasource（基于 Spring Boot 的快速集成多数据源的启动器） p6spy P6Spy（SQL 性能分析组件） sinopharm-starter-core Sinopharm Starter 核心包","tags":["sinopharm-starter"]},{"title":"Git Submodule 子项目全流程使用指南","path":"/2024/08/07/dev/git-submodule/","content":"Git Submodule 是 Git 中用于管理子项目的强大功能。它允许我们将一个 Git 仓库作为另一个 Git 仓库的子模块进行管理，从而使项目结构更加清晰，代码维护更加方便。 本指南将详细讲解 Git Submodule 的创建、规划、更新、合并全流程的使用过程和操作步骤，可以更好地理解和使用 Submodule。 创建 Submodule 初始化主项目 我们需要初始化一个主项目仓库 1git init &lt;主项目名称&gt; 添加子模块 使用 git submodule add 命令添加子模块 1git submodule add &lt;子模块 URL&gt; &lt;子模块目录&gt; 例: 将名为 lib 的子模块添加到 main 项目中 1git submodule add git@github.com:user/lib.git lib 提交变更 提交添加子模块的变更 1git commit -m &#x27;添加子模块 lib&#x27; 规划 Submodule 子模块版本控制 我们可以像管理主项目一样管理子模块版本 克隆子模块 –init 选项: 如果子模块尚未初始化，则将其初始化 –recursive 选项: 递归更新所有子模块，包括嵌套子模块 该命令将执行以下操作: 初始化所有未初始化的子模块 更新所有子模块到最新提交 递归更新所有嵌套子模块 1git submodule update --init --recursive 更新子模块 1git submodule update --recursive 提交子模块变更 123456cd libgit add .git commit -m &quot;更新子模块 lib&quot;cd ..git submodule add libgit commit -m &quot;更新子模块版本&quot; 子模块分支管理 子模块可以独立进行分支管理 切换子模块分支 1git submodule checkout &lt;分支名称&gt; 创建子模块分支 1git submodule branch &lt;分支名称&gt; 合并子模块分支 1git submodule merge &lt;分支名称&gt; 更新 Submodule 更新所有子模块 我们可以使用 git submodule update 命令更新所有子模块 1git submodule update --recursive 更新指定子模块 使用 git submodule update 命令更新指定的子模块 1git submodule update &lt;子模块目录&gt; 例：更新 lib 子模块 1git submodule update lib 单独更新子模块 使用 git fetch 和 git reset 命令单独更新子模块 12git fetch &lt;子模块 URL&gt;git reset --hard &lt;子模块版本&gt; 例：将 lib 子模块更新到 v1.0.0 版本 12git fetch git@github.com:user/lib.gitgit reset --hard v1.0.0 合并 Submodule 合并子模块变更 当子模块发生变更时，需要将其合并到主项目中 123git submodule update --init --recursivegit add .git commit -m &quot;合并子模块变更&quot; 解决冲突 如果子模块更新导致冲突，需要手动解决冲突 1234git submodule statusgit submodule foreach git mergetoolgit add .git commit -m &quot;解决子模块冲突&quot; 高级用法 子模块指针 使用子模块指针来指定子模块的特定版本 12git submodule add --depth 1 git@github.com:user/lib.git libgit submodule update --init --recursive 子模块克隆 使用 git submodule clone 命令克隆子模块到单独的目录。 1git submodule clone git@github.com:user/lib.git lib 子模块删除 使用 git submodule deinit 和 git rm 命令删除子模块 12git submodule deinit libgit rm -rf lib 注意： 使用 Submodule 时需要注意以下几点 子模块的更新可能会导致项目冲突，需要及时解决 子模块的版本管理需要纳入项目的整体规划","tags":["git"]},{"title":"Linux Cups 实战","path":"/2024/08/06/linux/cups-install/","content":"本文以Rocky Linux 8.9 (Green Obsidian)为例使用的身份均为root，并且没有启用防火墙。 安装cups 12sudo yum install cupssudo yum install foomatic-filters 配置 cups 1sudo nano /etc/cups/cupsd.conf 配置监听的ip地址和端口 将Listen localhost:631修改为服务器分配的IP地址，如果想设置全部IP都监听，则修改为Listen 0.0.0.0:631 其中631是CUPS默认的监听端口，如果有使用IPv6的需求，则需要额外添加Listen [::]:631，这里的::表示全部IPv6地址，请根据实际情况修改。 1234# Only listen for connections from the local machine.Listen 10.32.7.38:631Listen localhost:631Listen /run/cups/cups.sock 配置 cups 允许访问的IP地址 格式是Allow from ip&#x2F;subnetmask，如允许192.168.1.0、子网掩码是255.255.255.0的网段时，则Allow from 192.168.1.0&#x2F;24，IPv6的地址需要额外加上[]，如Allowfrom [FDEE::]&#x2F;7。 12345# Restrict access to the server...&lt;Location /&gt; Allow from 10.32.96.241/24 Order allow,deny&lt;/Location&gt; 如果允许全部主机访问，则直接添加Allow all即可，如下 12345# Restrict access to the server...&lt;Location /&gt; Allow all Order allow,deny&lt;/Location&gt; 配置允许访问管理页面的ip地址范围格式与上述一致 12345# Restrict access to the admin pages...&lt;Location /admin&gt; Allow from 10.32.105.40/24 Order allow,deny&lt;/Location&gt; 启动cups 1systemctl start cups 添加打印机以得实针式打印机为例 打印机管理页面 添加打印机配置驱动，手动添加PDD驱动，配置完成后，点击Add Printer 设置打印机首选项 问题汇总 添加打印机后,cups4j 无法获取到打印机信息 1查看添加打印机时是否共享该打印机,如果没有共享,cups4j是拿不到该打印机的","tags":["linux"]}]